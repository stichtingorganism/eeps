::

  EEP: 0
  Title:  EEP Process
  Owners: Stichting Organism     
  Status: Active
  Category: Process
  Created: 2019-07-09
  License: BSD-2-Clause


Abstract
========

An Euka Evolution Proposal (EEP) is a design document providing
information to the Organism community, or describing a new feature for
Euka or its processes or environment. The EEP should provide a concise
technical specification of the feature and a rationale for the feature.

We intend EEPs to be the primary mechanism for proposing new features,
for collecting community input on an issue, and for documenting the
design decisions that have gone into Euka. The author(s) of the EEP
(known as Owners in this document) are responsible for building
consensus within the community and documenting dissenting opinions.

Because the EEPs are maintained as text files in a versioned repository,
their revision history is the historical record of the feature proposal.

This document is based on the work done by Luke Dashjr with
`BIP 2 <https://github.com/bitcoin/bips>`__ and Daira Hopwood & Josh Cincinnati with
`ZIP 0 <https://github.com/zcash/zips/blob/master/zip-0000.rst>`__.


EEP Workflow
============

The EEP process begins with a new idea for Euka. Each potential EEP
must have a Owner -- someone who writes the EEP using the style and
format described below, shepherds the discussions in the appropriate
forums, and attempts to build community consensus around the idea. The
EEP Owner (a.k.a. author) should first attempt to ascertain whether
the idea is EEP-able. Small enhancements or patches to a particular
piece of software often don't require standardisation between multiple
projects; these don't need a EEP and should be injected into the
relevant project-specific development workflow with a patch submission
to the applicable issue tracker. Additionally, many ideas may be
brought forward for changing Euka that will be rejected for various
reasons. The first step should be to search past discussions to see if
an idea has been considered before, and if so, what issues arose in its
progression. After investigating past work, the best way to proceed is
by posting about the new idea to the `Organism Community Forum
<>`__.

Vetting an idea publicly before going as far as writing a EEP is meant
to save both the potential Owner and the wider community time. Asking
the Organism community first if an idea is original helps prevent too much
time being spent on something that is guaranteed to be rejected based on
prior discussions (searching the internet does not always do the trick).
It also helps to make sure the idea is applicable to the entire
community and not just the Owner. Just because an idea sounds good to
the Owner does not mean it will work for most people in most areas
where Euka is used.

Once the Owner has asked the Organism community as to whether an idea
has any chance of acceptance, a draft EEP should be presented to the
`Organism Community Forum <https://>`__.
This gives the Owner a chance to flesh out the draft EEP to make it
properly formatted, of high quality, and to address additional concerns
about the proposal. Following a discussion, the proposal should be
submitted to the `ZIPs git repository <https://github.com/stichtingorganism/eeps>`__
as a pull request. This draft must be written in EEP style as described
below, and named with an alias such as
``eep-satoshinakamoto-livelong`` until the EEP Editors have assigned
it a EEP number (Owners MUST NOT self-assign EEP numbers).

EEP Owners are responsible for collecting community feedback on both
the initial idea and the EEP before submitting it for review. However,
wherever possible, long open-ended discussions on forums should be avoided.

It is highly recommended that a single EEP contain a single key proposal
or new idea. The more focused the EEP, the more successful it will tend to
be. If in doubt, split your EEP into several well-focused ones.

When the EEP draft is complete, the EEP Editors will assign the EEP a
number, label it as Standards Track, Informational, or Process, and
merge the pull request to the EEPs git repository. The EEP Editors
will not unreasonably reject a EEP. Reasons for rejecting EEPs include
duplication of effort, disregard for formatting rules, being too
unfocused or too broad, being technically unsound, not providing proper
motivation or not in keeping with the Organism philosophy. For a EEP to be
accepted it must meet certain minimum criteria. It must be a clear and
complete description of the proposed enhancement. The enhancement must
represent a net improvement. The proposed implementation, if applicable,
must be solid and must not complicate the protocol unduly.

The EEP Owner may update the draft as necessary in the git
repository. Updates to drafts should also be submitted by the Owner
as pull requests.


Transferring EEP Ownership
--------------------------

It occasionally becomes necessary to transfer ownership of EEPs to a new
Owner. In general, we'd like to retain the original Owner as a
co-Owner of the transferred EEP, but that's really up to the original
Owner. A good reason to transfer ownership is because the original
Owner no longer has the time or interest in updating it or following
through with the EEP process, or has fallen off the face of the 'net
(i.e. is unreachable or not responding to email). A bad reason to
transfer ownership is because you don't agree with the direction of the
EEP. We try to build consensus around a EEP, but if that's not possible,
you can always submit a competing EEP.

If you are interested in assuming ownership of a EEP, send a message
asking to take over, addressed to both the original Owner and the EEP
Editors. If the original Owner doesn't respond to email in a timely
manner, the EEP Editors will make a unilateral decision (it's not like
such decisions can't be reversed :).

EEP Editors
-----------

The current EEP Editor is Stichting Organism. Overtime Editors may
be selected by consensus among the current Editors & Community input. 


EEP Comments
============

Comments from the community on the EEP should occur on the comment fields of the pull requests in
any open EEPs. Editors will use these sources to judge rough consensus. 


EEP licensing
=============

New EEPs may be accepted with the following licenses. Each new EEP MUST
identify at least one acceptable license in its preamble. Each license
MUST be referenced by their respective abbreviation given below.

For example, a preamble might include the following License header::

  License: BSD-2-Clause
           GNU-All-Permissive

In this case, the EEP text is fully licensed under both the OSI-approved
BSD 2-clause license as well as the GNU All-Permissive License, and
anyone may modify and redistribute the text provided they comply with
the terms of *either* license. In other words, the license list is an
"OR choice", not an "AND also" requirement.

It is also possible to license source code differently from the EEP
text. This case SHOULD be indicated in the Reference Implementation
section of the EEP. Again, each license MUST be referenced by its
respective abbreviation given below.

Statements of code licenses in EEPs are only advisory; anyone intending
to use the code should look for license statements in the code itself.

EEPs are not required to be *exclusively* licensed under approved
terms, and MAY also be licensed under unacceptable licenses
*in addition to* at least one acceptable license. In this case, only the
acceptable license(s) should be listed in the License header.

Recommended licenses
--------------------

* MIT: `Expat/MIT/X11 license <https://opensource.org/licenses/MIT>`__
* BSD-2-Clause: `OSI-approved BSD 2-clause
  license <https://opensource.org/licenses/BSD-2-Clause>`__
* BSD-3-Clause: `OSI-approved BSD 3-clause
  license <https://opensource.org/licenses/BSD-3-Clause>`__
* CC0-1.0: `Creative Commons CC0 1.0
  Universal <https://creativecommons.org/publicdomain/zero/1.0/>`__
* GNU-All-Permissive: `GNU All-Permissive
  License <http://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html>`__
* Apache-2.0: `Apache License, version
  2.0 <http://www.apache.org/licenses/LICENSE-2.0>`__

In addition, it is RECOMMENDED that literal code included in the EEP be
dual-licensed under the same license terms as the project it modifies.
For example, literal code intended for darwin would ideally be
dual-licensed under the MIT license terms as well as one of the above
with the rest of the EEP text.

Not recommended, but acceptable licenses
----------------------------------------
* CC-BY-4.0: `Creative Commons Attribution 4.0
  International <https://creativecommons.org/licenses/by/4.0/>`__
* CC-BY-SA-4.0: `Creative Commons Attribution-ShareAlike 4.0
  International <https://creativecommons.org/licenses/by-sa/4.0/>`__
* AGPL-3.0+: `GNU Affero General Public License (AGPL), version 3 or
  newer <http://www.gnu.org/licenses/agpl-3.0.en.html>`__
* FDL-1.3: `GNU Free Documentation License, version
  1.3 <http://www.gnu.org/licenses/fdl-1.3.en.html>`__
* GPL-2.0+: `GNU General Public License (GPL), version 2 or
  newer <http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html>`__
* LGPL-2.1+: `GNU Lesser General Public License (LGPL), version 2.1 or
  newer <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html>`__

Not acceptable licenses
-----------------------

All licenses not explicitly included in the above lists are not
acceptable terms for a Euka Evolution Proposal.

Rationale
---------

Bitcoin's BIP 1 allowed the Open Publication License or releasing into
the public domain; was this insufficient?

* The OPL is generally regarded as obsolete, and not a license suitable
  for new publications.
* The OPL license terms allowed for the author to prevent publication
  and derived works, which was widely considered inappropriate.
* In some jurisdictions, releasing a work to the public domain is not
  recognised as a legitimate legal action, leaving the EEP simply
  copyrighted with no redistribution or modification allowed at all.

Why are there software licenses included?

* Some EEPs, especially in the Consensus category, may include literal
  code in the EEP itself which may not be available under the exact
  license terms of the EEP.
* Despite this, not all software licenses would be acceptable for
  content included in EEPs.


See Also
========

* `The GNU Kind Communication
  Guidelines <https://www.gnu.org/philosophy/kind-communication.en.html>`__
* `RFC 7282: On Consensus and Humming in the
  IETF <https://tools.ietf.org/html/rfc7282>`__
  
  
References
==========
.. [#conduct] `Euka Code of Conduct <https://github.com/stichtingorganism/eeps/blob/master/code_of_conduct.md>`_
